<?php

define('AGILE_SEARCH_DATA_TYPE_DATE', 'date');
define('AGILE_SEARCH_DATA_TYPE_DATE_RANGE_END', 'range-end');
define('AGILE_SEARCH_DATA_TYPE_DATE_RANGE_START', 'range-start');
define('AGILE_SEARCH_DATA_TYPE_LIKE', 'like');
define('AGILE_SEARCH_DATA_TYPE_EXACT', 'exact');
define('AGILE_SEARCH_DATA_TYPE_LT', 'less-than');
define('AGILE_SEARCH_DATA_TYPE_GT', 'greater-than');
define('AGILE_SEARCH_DATA_TYPE_LTE', 'lte');
define('AGILE_SEARCH_DATA_TYPE_GTE', 'gte');
define('AGILE_SEARCH_DATA_TYPE_NOT', 'not');

function agileissues_search_vectors($for_type) {
  module_load_include('internal.inc', 'agileissues');
  $vectors = _agileissues_get_search_vectors();
  if (isset($vectors[$for_type])) {
    return $vectors[$for_type];
  }
  return array();
}

function agileissues_relationships() {
  module_load_include('internal.inc', 'agileissues');
  return _agileissues_get_relationship_definitions();
}

function agileissues_changelog_processors($for_type) {
  module_load_include('internal.inc', 'agileissues');
  $processors = _agileissues_get_changelog_processors();
  if (isset($processors[$for_type])) {
    return $processors[$for_type];
  }
  return array();
}

function agileissues_metrics() {
  module_load_include('internal.inc', 'agileissues');
  return _agileissues_get_metric_definitions();
}

function agileissues_operations($type, $object = NULL, $render = 'main') {
  $actions = module_invoke_all('agile_operations', $type, $object, $render);
  drupal_alter($actions, $type, $object, $render);
  return $actions;
}

/**
 * Implements hook_agile_dynamic_search_vectors().
 */
function agileissues_agile_dynamic_search_vectors($for_type) {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_dynamic_search_flags($for_type);
}

/**
 * Implements hook_agile_static_search_vectors().
 */
function agileissues_agile_static_search_vectors($for_type) {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_static_search_flags($for_type);
}

/**
 * Implements hook_agile_relationships().
 */
function agileissues_agile_relationships() {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_relationships();
}

/**
 * Implements hook_cron().
 */
function agileissues_cron() {
  module_load_include('internal.inc', 'agileissues');
  _agileissues_update_priorities();
}

/**
 * Implements hook_agile_changelog_processors().
 */
function agileissues_agile_changelog_processors($for_type) {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_changelog_processors($for_type);
}

/**
 * Implements hook_theme().
 */
function agileissues_theme($existing, $type, $theme, $path) {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_theme_hooks($path);
}

/**
 * Implements hook_agile_operations().
 */
function agileissues_agile_operations($type, $object, $render) {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_operations($type, $object, $render);
}

/**
 * Implements hook_agile_metrics().
 */
function agileissues_agile_metrics() {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_metrics();
}

/**
 * Implements hook_permission().
 */
function agileissues_permission() {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_permissions();
}

/**
 * Implements hook_menu().
 */
function agileissues_menu() {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_default_menu();
}

/**
 * Implements hook_entity_info().
 */
function agileissues_entity_info() {
  module_load_include('defaults.inc', 'agileissues');
  return _agileissues_defaults_entity_info();
}

/**
 * Implements hook_preprocess().
 */
function agileissues_preprocess_entity(&$vars) {
  if (in_array($vars['elements']['#entity_type'], array('agile_project', 'agile_task', 'agile_story', 'agile_note'))) {
    $base = array_shift($vars['theme_hook_suggestions']);
    $type = array_shift($vars['theme_hook_suggestions']);
    array_unshift($vars['theme_hook_suggestions'], $vars['elements']['#entity_type'] . '__' . $vars['elements']['#view_mode']);
    array_unshift($vars['theme_hook_suggestions'], $type);
    array_unshift($vars['theme_hook_suggestions'], $base);
  }
}

/**
 * Implements hook_agile_story_priority().
 */
function agileissues_agile_story_priority($story) {
  $scores = array();
  $weeks = floor((time() - $story->created) / 604800);
  // stop growing priority after 2 years, because really who cares (also exp()
  // gets really big).
  if ($weeks > 104) { $weeks = 104; }
  $scores[] = exp($weeks / 20);
  return $scores;
}

function _agileissues_reload_task_ajax($form) {
  return $form['sprint_id'];
}

function agileissues_rebuild_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

function agileissues_metrics_form_callback($form, &$form_state) {
  return $form['results'];
}

function agileissues_relationship_autocomplete($string) {
  $results = array();
  $stories = db_select('agileissues_stories', 'ais')
    ->condition('title', '%' . $string . '%', 'LIKE')
    ->fields('ais', array('id', 'title'))
    ->execute()->fetchAllKeyed(0, 1);
  foreach ($stories as $key => $title) {
    $results['story|' . $key] = $title;
  }
  $tasks = db_select('agileissues_tasks', 'ais')
    ->condition('title', '%' . $string . '%', 'LIKE')
    ->fields('ais', array('id', 'title'))
    ->execute()->fetchAllKeyed(0, 1);
  foreach ($tasks as $key => $title) {
    $results['task|' . $key] = $title;
  }
  drupal_json_output($results);
  drupal_exit();
}

function agileissues_project_type_exists($name) {
  $bundle = agileissues_load_bundle('project', $name);
  return !empty($bundle);
}

function agileissues_story_type_exists($name) {
  $bundle = agileissues_load_bundle('story', $name);
  return !empty($bundle);
}
function agileissues_task_type_exists($name) {
  $bundle = agileissues_load_bundle('task', $name);
  return !empty($bundle);
}

function agileissues_backlog_type_exists($name) {
  $bundle = agileissues_load_bundle('backlog', $name);
  return !empty($bundle);
}

function agileissues_sprint_type_exists($name) {
  $bundle = agileissues_load_bundle('sprint', $name);
  return !empty($bundle);
}


function agileissues_load_backlog_project_metadata($project, $backlog) {
  return db_select('agileissues_project_backlog', 'apb')
    ->condition('backlog_id', $backlog->id)
    ->condition('project_id', $project->id)
    ->fields('apb')
    ->execute()->fetchObject();
}

function agileissues_task_load($task_id) {
  $controller = entity_get_controller('agile_task');
  $entities = $controller->load(array($task_id));
  return reset($entities);
}
function agileissues_sprint_load_all($ids = FALSE) {
  $entities = entity_get_controller('agile_sprint')->load($ids);
  return $entities;
}

function agileissues_sprint_load($id) {
  $entities = agileissues_sprint_load_all(array($id));
  return reset($entities);
}

function agileissues_backlog_load_all($ids = FALSE) {
  $entities = entity_get_controller('agile_backlog')->load($ids);
  return $entities;
}

function agileissues_backlog_load($id) {
  $entities = agileissues_backlog_load_all(array($id));
  return reset($entities);
}

function agileissues_story_load($story_id) {
  $entities = agileissues_story_load_multiple(array($story_id));
  return reset($entities);
}

function agileissues_story_load_multiple($ids = FALSE) {
  return entity_get_controller('agile_story')->load($ids);
}

function agileissues_project_load_all($ids = FALSE) {
  $entities = entity_get_controller('agile_project')->load($ids);
  return $entities;
}

function agileissues_project_load($id) {
  $entities = agileissues_project_load_all(array($id));
  return reset($entities);
}

function agileissues_project_type_load($name) { 
  return agileissues_load_bundle('project', $name); 
}

function agileissues_story_type_load($name) { 
  return agileissues_load_bundle('story', $name); 
}

function agileissues_task_type_load($name) { 
  return agileissues_load_bundle('task', $name); 
}

function agileissues_backlog_type_load($name) { 
  return agileissues_load_bundle('backlog', $name);
}

function agileissues_sprint_type_load($name) { 
  return agileissues_load_bundle('sprint', $name);
}

function agileissues_load_bundle($singular, $type) {
  $bundles = agileissues_load_bundles_of_type($singular);
  if (isset($bundles[$type])) {
    return (object) array(
      'label' => $bundles[$type],
      'machine_name' => $type,
    );
  }
  return NULL;
}

function agileissues_load_bundles_of_type($singular) {
  return db_select('agileissues_' . $singular . '_types', 'et')
          ->fields('et', array('machine_name', 'label'))
          ->orderBy('label')
          ->execute()
          ->fetchAllKeyed();
}

function agileissues_note_load_multiple($ids = FALSE) {
  return entity_get_controller('agile_note')->load($ids);
}

function agileissues_note_load($id) {
  $entities = agileissues_note_load_multiple(array($id));
  return reset($entities);
}

function agileissues_project_save($project) {
  return entity_get_controller('agile_project')->save($project) !== FALSE;
}

function agileissues_sprint_save($sprint) {
  return entity_get_controller('agile_sprint')->save($sprint) !== FALSE;
}

function agileissues_backlog_save($backlog) {
  return entity_get_controller('agile_backlog')->save($backlog) !== FALSE;
}

function agileissues_story_save($story) {
  return entity_get_controller('agile_story')->save($story);
}

function agileissues_save_task(&$task) {
  return entity_get_controller('agile_task')->save($task);
}

function agileissues_save_note($note) {
  return entity_get_controller('agile_note')->save($note);
}

function agileissues_save_bundle($singular, $bundle) {
  return db_merge('agileissues_' . $singular . '_types')
          ->key(array('machine_name' => $bundle->machine_name))
          ->fields((array) $bundle)
          ->execute() !== FALSE;
}


function agileissues_backlog_delete($backlog, $tx = NULL) {
  return entity_get_controller('agile_backlog')->delete(array($backlog->id), $tx) !== FALSE;
}

function agileissues_project_delete($project, $tx = NULL) {
  return entity_get_controller('agile_project')->delete(array($project->id), $tx) !== FALSE;
}

function agileissues_sprint_delete($sprint, $tx = NULL) {
  return entity_get_controller('agile_sprint')->delete(array($sprint->id), $tx) !== FALSE;
}

function agileissues_delete_bundle($singular, $type) {
  $lookup = array(
      'project' => 'projects',
      'story' => 'stories',
      'backlog' => 'backlogs',
      'task' => 'tasks',
      'sprint' => 'sprints',
  );
  $children = db_select('agileissues_' . $lookup[$singular], 'e')
          ->fields('e', array('id'))
          ->condition('type', $type)
          ->execute()
          ->fetchAllKeyed(0, 0);
  $success = db_delete('agileissues_' . $singular . '_types')
          ->condition('machine_name', $type)
          ->execute() !== FALSE;
  if ($success) {
    foreach ($children as $id) {
      $success = entity_delete('agile_' . $singular, $id) && $success;
    }
  }
  else {
    drupal_set_message('bad');
  }
  return $success;
}


function agileissues_note_load_by_entity($type, $entity) {
  $ids = db_select('agileissues_notes', 'ain')
    ->condition('entity_type', $type)
    ->condition('entity_id', $entity->id)
    ->fields('ain', array('id'))
    ->execute()->fetchAllKeyed(0, 0);
  return agileissues_note_load_multiple($ids);
}

function agileissues_orphan_stories() {
  return entity_get_controller('agile_story')->load(db_select('agileissues_stories', 'ais')
    ->condition('project_id', 0)
    ->fields('ais', array('id'))
    ->execute()
    ->fetchAllKeyed(0, 0));
}

function agileissues_unassigned_stories($project = NULL) {
  $q = db_select('agileissues_stories', 'ais');
  if (!empty($project)) {
    $q->condition('project_id', $project->id);
  }
  return entity_get_controller('agile_story')->load($q
    ->condition('backlog_id', 0)
    ->fields('ais', array('id'))
    ->execute()
    ->fetchAllKeyed(0, 0));
}

function agileissues_unassigned_tasks($project = NULL) {
  $q = db_select('agileissues_tasks', 'ait');
  if (!empty($project)) {
    $story_ids = agileissues_project_story_ids($project);
    if (empty($story_ids)) {
      return array();
    }
    $q->condition('story_id', $story_ids);
  }
  $task_ids = $q
    ->condition('sprint_id', 0)
    ->fields('ait', array('id'))
    ->execute()
    ->fetchAllKeyed(0, 0);
  if (empty($task_ids)) { return array(); }
  return entity_get_controller('agile_task')->load($task_ids);
}

function agileissues_project_sprints($agile_project) {
  return agileissues_sprint_load_all(db_select('agileissues_stories', 'ais')
    ->condition('project_id', $agile_project->id)
    ->fields('ais', array('id'))
    ->execute()
    ->fetchAllKeyed(0, 0));
}

function agileissues_project_story_ids($project) {
  return db_select('agileissues_stories', 'ais')
    ->condition('project_id', $project->id)
    ->fields('ais', array('id'))
    ->execute()
    ->fetchAllKeyed(0, 0);
}

function agileissues_project_count_tasks($agile_project, $sprint = NULL) {
  $q = db_select('agileissues_tasks', 'ait')
    ->condition('story_id', agileissues_project_story_ids($agile_project));
  if (!empty($sprint)) {
    $q->condition('sprint_id', $sprint->id);
  }
  return $q->countQuery()->execute()->fetchColumn();
}

function agileissues_project_stories($project) {
  $ids = db_select('agileissues_stories', 'ais')
    ->fields('ais', array('id'))
    ->condition('project_id', $project->id)
    ->execute()
    ->fetchAllKeyed(0, 0);
  return agileissues_project_load_all($ids);
}

function agileissues_project_backlogs($project) {
  $ids = db_select('agileissues_stories', 'ais')
    ->fields('ais', array('backlog_id'))
    ->condition('project_id', $project->id)
    ->execute()
    ->fetchAllKeyed(0, 0);
  return agileissues_backlog_load_all($ids);
}

function agileissues_project_count_stories($project, $backlog = NULL) {
  $q = db_select('agileissues_stories', 'ais')
    ->condition('project_id', $project->id);
  if (!empty($backlog)) {
    $q->condition('backlog_id', $backlog->id);
  }
  return $q->countQuery()->execute()->fetchColumn();
}

function _agileissues_get_all_notes($type, $object, $view_mode) {
  $modules = module_implements('agile_object_notes');
  $all_notes = array();
  foreach ($modules as $module) {
    $notes = module_invoke($module, 'agile_object_notes', $type, $object, $view_mode);
    foreach ($notes as $note) {
      $all_notes[] = $note;
    }
  }
  uasort($all_notes, '_agileissues_sort_note_list');
  return $all_notes;
}

/**
 * Implements hook_agile_object_notes().
 */
function agileissues_agile_object_notes($type, $object, $view_mode) {
  module_load_include('internal.inc', 'agileissues');
  $notes = array();
  _agileissues_append_actual_notes($notes, $type, $object, $view_mode);
  _agileissues_append_changelog($notes, $type, $object, $view_mode);
  if ($type === 'story') {
    _agileissues_append_tasks($notes, $type, $object, $view_mode);
  }
  return $notes;
}

function _agileissues_sort_note_list($a, $b) {
  return $b['#agile_date'] - $a['#agile_date'];
}

function agileissues_public_access($type, $object = NULL, $subobject = NULL) {
  global $user;
  $hidden = user_access('access all hidden objects');
  $internal = user_access('access internal objects');
  switch ($type) { 
    case 'home':
      return user_access('browse public agile stories') ||
          user_access('browse public agile tasks');
    case 'project':
      if ($object->privacy === 'I' && !$internal) {
        return FALSE;
      }
      if ($object->privacy === 'H' && !$hidden) {
        return FALSE;
      }
      return user_access('browse public agile stories') ||
          user_access('browse public agile tasks');
    case 'backlog':
      if (empty($subobject)) {
        if ($object->privacy === 'I' && !$internal) {
          return FALSE;
        }
        if ($object->privacy === 'H' && !$hidden) {
          return FALSE;
        }
      }
      else {
        $backlog_meta = agileissues_load_backlog_project_metadata($object, $subobject);
        if ($backlog_meta->privacy === 'I' && !$internal) {
          return FALSE;
        }
        if ($backlog_meta->privacy === 'H' && !$hidden) {
          return FALSE;
        }
      }
      return user_access('browse public agile stories');
    case 'sprint':
      if (empty($subobject)) {
        if ($object->privacy === 'I' && !$internal) {
          return FALSE;
        }
        if ($object->privacy === 'H' && !$hidden) {
          return FALSE;
        }
      }
      else {
        if ($subobject->privacy === 'I' && !$internal) {
          return FALSE;
        }
        if ($subobject->privacy === 'H' && !$hidden) {
          return FALSE;
        }
      }
      return user_access('browse public agile tasks');
    case 'story':
      if ($object->reporting_uid == $user->uid) { $hidden = TRUE; $internal = TRUE; }
      if ($object->primary_uid === $user->uid) { $hidden = TRUE; $internal = TRUE; }
      if ($object->privacy === 'I' && !$internal) {
        return FALSE;
      }
      if ($object->privacy === 'H' && !$hidden) {
        return FALSE;
      }
      return user_access('browse public agile stories');
    case 'task':
      if ($object->uid == $user->uid) { $hidden = TRUE; $internal = TRUE; }
      if ($object->creator === $user->uid) { $hidden = TRUE; $internal = TRUE; }
      if ($object->privacy === 'I' && !$internal) {
        return FALSE;
      }
      if ($object->privacy === 'H' && !$hidden) {
        return FALSE;
      }
      return user_access('browse public agile tasks');
  }
  return FALSE;
}

function agileissues_backend_access() {
  return user_access('manage agile projects') ||
      user_access('manage agile sprints') ||
      user_access('manage agile backlogs');
}


function agileissues_frontend_access() {
  $check = array('open new agile stories');
  foreach ($check as $permission) {
    if (user_access($permission)) {
      return TRUE;
    }
  }
  return FALSE;
}

function agileissues_search_access() {
  $valid = array('manage agile tasks', 'manage agile stories', 'view all agile tasks', 'view own agile tasks');
  foreach ($valid as $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }
  if (agileissues_public_access('home')) {
    return TRUE;
  }
  return FALSE;
}

function agileissues_project_access($project) {
  $valid = array('manage agile tasks', 'manage agile stories', 'view all agile tasks', 'view own agile tasks');
  foreach ($valid as $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }
  return FALSE;
}

function agileissues_task_access($type, $task) {
  if (user_access('manage agile tasks') || user_access('manage internal task data')) {
    return TRUE;
  }
  if (user_access($type . ' all agile tasks')) {
    return TRUE;
  }
  global $user;
  if ($task->uid == $user->uid) {
    return user_access($type . ' own agile tasks');
  }
  return FALSE;
}

function agileissues_story_access($type, $story) {
  if (user_access('manage agile stories') || user_access('manage internal story data')) {
    return TRUE;
  }
  if (user_access($type . ' all agile stories')) {
    return TRUE;
  }
  global $user;
  if ($story->reporting_uid == $user->uid ||
    $story->primary_uid == $user->uid) {
    return user_access($type . ' own agile stories');
  }
  return FALSE;
}

function agileissues_autocomplete_access() {
  $valid = array('manage internal story data', 'manage internal task data');
  foreach ($valid as $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }
  return FALSE;
}

function agileissues_sprint_access($op, $entity = NULL, $account = NULL) {
  if ($op === 'view') {
    return TRUE;
  }
  return user_access('manage agile issue entities');
}


function agileissues_project_uri($project) {
  return array(
    'path' => 'agile/project/' . $project->id,
  );
}

function agileissues_story_uri($story) {
  return array(
    'path' => 'agile/story/' . $story->id . '/nojs',
  );
}

function agileissues_backlog_uri($backlog) {
  return array('path' => '');
}

function agileissues_task_uri($task) {
  return array(
    'path' => 'agile/task/' . $task->id,
  );
}

function agileissues_sprint_uri($sprint) {
  return array('path' => '');
}

function agileissues_note_uri($note) {
  return array(
    'path' => '<front>',
  );
}

function agileissues_get_modal_form($form_id, $ajax) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  $form_state = array(
    'build_info' => array(
      'args' => $args,
    ),
  );
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state += array(
      'ajax' => TRUE,
    );
    
    $output = ctools_modal_form_wrapper($form_id, $form_state);
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_build_form($form_id, $form_state);
  }
}

function agileissues_get_content($callback, $ajax) {
  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  if ($ajax) {
    ctools_include('modal');
    $output = drupal_render(call_user_func_array($callback, $args));
    $commands = array();
    // If the form has not yet been rendered, render it.
    $commands[] = ctools_modal_command_display(drupal_get_title(), $output);
    print ajax_render($commands);
    drupal_exit();
  }
  else {
    return call_user_func_array($callback, $args);
  }
}

function agileissues_sort_backlogs_for_project($project, $backlogs, $sortOnly = FALSE) {
  $newBacklogs = array();
  $weights = array();
  foreach ($backlogs as $backlog) {
    $meta = agileissues_load_backlog_project_metadata($project, $backlog);
    if (!$sortOnly) {
      if ($meta->used !== 'Y') {
        continue;
      } elseif ($meta->privacy === 'H' && !user_access('access all hidden objects')) {
        continue;
      } elseif ($meta->privacy === 'I' && !user_access('access internal objects')) {
        continue;
      }
    }
    $weights[(int) $backlog->id] = $meta->weight;
  }
  asort($weights);
  foreach ($weights as $id => $weight) {
    $newBacklogs[$id] = $backlogs[$id];
  }
  return $newBacklogs;
}

  function agileissues_filter_entities($type, $entities, $mode) {
    if ($type === 'agile_story') { $type = 'story'; }
    if ($type === 'agile_task') { $type = 'task'; }
    $filtered = array();
    foreach ($entities as $id => $entity) {
      $valid = FALSE;
      if ($mode === 'teaser' && $type === 'story') {
        $valid = agileissues_story_access('view', $entity);
      }
      elseif ($mode === 'teaser' && $type === 'task') {
        $valid = agileissues_task_access('view', $entity);
      }
      else {
        $valid = agileissues_public_access($type, $entity);
      }
      if ($valid) {
        $filtered[$id] = $entity;
      }
    }
    return $filtered;
  }

